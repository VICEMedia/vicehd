{
  "name": "rfolderify",
  "version": "1.2.0",
  "description": "Rewrite rfolder calls to a map of requires",
  "main": "index.js",
  "bin": {
    "rfileify": "./bin/rfolderify"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/quarterto/rfolderify.git"
  },
  "keywords": [
    "browserify",
    "fs",
    "readdir",
    "plugin",
    "static",
    "asset",
    "bundle",
    "base64",
    "uglify",
    "require",
    "resolve",
    "browser",
    "rfolder"
  ],
  "author": {
    "name": "ForbesLindesay"
  },
  "contributors": [
    {
      "name": "quarterto",
      "email": "matt.brennan@import.io"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "through": "~2.3.1",
    "falafel": "~0.2.1"
  },
  "devDependencies": {
    "mocha": "~1.9",
    "browserify": "~2.12"
  },
  "readme": "# rfileify\n\n  Convert any code using rfile and derivatives so that it supports browserify.\n\n[![Build Status](https://travis-ci.org/ForbesLindesay/rfileify.png?branch=master)](https://travis-ci.org/ForbesLindesay/rfileify)\n[![Dependency Status](https://gemnasium.com/ForbesLindesay/rfileify.png)](https://gemnasium.com/ForbesLindesay/rfileify)\n\n  This module is a plugin for [browserify](http://browserify.org/) to parse the AST for `rfile` calls so that you can inline the file contents into your bundles.\n\n  In addition to supporting `rfile`, you can also use modules which internally use `rfile` providing they meet the simple requirement of taking an object with `dirname` property as their second argument and are listed in the array of valid file names modules in index.js.  Currently this is:\n\n  - [rfile](https://github.com/ForbesLindesay/rfile) - \"require\" static text files\n  - [ruglify](https://github.com/ForbesLindesay/ruglify) - \"require\" minified source code\n\nEven though this module is intended for use with browserify, nothing about it is particularly specific to browserify so it should be generally useful in other projects.\n\n## Example with Browserify\n\n  For a main.js\n\n```javascript\nvar rfile = require('rfile');\nvar html = rfile('./robot.html');\nconsole.log(html);\n```\n\n  And a robot.html\n\n```html\n<b>beep boop</b>\n```\n\n  first `npm install rfileify` into your project, then:\n\n### on the command-line\n\n```\n$ browserify -t rfileify example/main.js > bundle.js\n```\n\nnow in the bundle output file,\n\n```javascript\nvar html = rfile('./robot.html');\n```\n\nturns into:\n\n```javascript\nvar html = \"<b>beep boop</b>\";\n```\n\n(and `require('rfile')` turns into `undefined` so you're not loading code you're never going to use).\n\n### or with the API\n\n```javascript\nvar browserify = require('browserify');\nvar fs = require('fs');\n\nvar b = browserify('example/main.js');\nb.transform('rfileify');\n\nb.bundle().pipe(fs.createWriteStream('bundle.js'));\n```\n\n## Direct Usage\n\nA tiny command-line program ships with this module for easier debugging and if you just want this without any of the rest of browserify.\n\n```\nnpm install rfileify -g\nrfileify --help\n```\n\n## License\n\nMIT\n\n![viewcount](https://viewcount.jepso.com/count/ForbesLindesay/rfileify.png)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/quarterto/rfolderify/issues"
  },
  "homepage": "https://github.com/quarterto/rfolderify",
  "_id": "rfolderify@1.2.0",
  "dist": {
    "shasum": "0adc904accdaa92c6569f736a947d4054f053eed"
  },
  "_from": "rfolderify@",
  "_resolved": "https://registry.npmjs.org/rfolderify/-/rfolderify-1.2.0.tgz"
}
